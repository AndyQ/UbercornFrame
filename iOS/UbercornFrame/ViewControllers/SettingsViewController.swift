//
//  SettingsViewController.swift
//  UbercornFrame
//
//  Created by Andy Qua on 23/11/2018.
//  Copyright Â© 2018 Andy Qua. All rights reserved.
//

import UIKit
import Starscream

class SettingsViewController: UIViewController {
    @IBOutlet weak var txtHostName : UITextField!
    @IBOutlet weak var txtPort : UITextField!
    @IBOutlet weak var txtApiKey : UITextField!

    var remote : RemoteServer!
    var hostName : String = ""
    var port : Int = 8765
    var apiKey : String = ""

    override func viewDidLoad() {
        super.viewDidLoad()

        let d = UserDefaults.standard
        self.hostName = d.string(forKey: "hostName") ?? ""
        self.port = d.integer(forKey: "port")
        self.apiKey = d.string(forKey: "apiKey") ?? ""

        self.txtHostName.text = self.hostName
        self.txtPort.text = "\(self.port == -1 ? 8765 : self.port)"
        self.txtApiKey.text = self.apiKey
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        _ = validateAndStoreDetails()
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let vc = segue.destination as? BarcodeScanViewController {
            vc.scannedBarcode = { [unowned self] (data) in
                let tokens = data.components(separatedBy: ":")
                if tokens.count != 3 {
                    self.alert( "Invalid QR Code scanned.\n\nPlease scan the QR Code generated by the Ubercorn python application using ./player --generate" )
                    return
                }
                
                print( "Scanned \(data)" )
                
                self.txtHostName.text = tokens[0]
                self.txtPort.text = tokens[1]
                self.txtApiKey.text = tokens[2]
                
                DispatchQueue.main.asyncAfter(deadline: .now()+0.5, execute: {
                    self.navigationController?.popViewController(animated: true)
                })

            }
        }
    }
    
    func validateAndStoreDetails( showAlert : Bool = false) -> Bool {
        guard let host = txtHostName.text, host != "" else {
                if showAlert {
                    alert("Invalid or missing hostname" )
                }
                return false
        }
        guard let portstr = txtPort.text, let portNr = Int(portstr), portNr > 0 else {
            if showAlert {
                alert("Invalid or missing port")
            }
            return false
        }

        guard let apiKey = txtApiKey.text, apiKey != "" else {
            if showAlert {
                alert("Invalid or missing api key")
            }
            return false
        }

        self.hostName = host
        self.port = portNr
        self.apiKey = apiKey

        let d = UserDefaults.standard
        d.set(host, forKey: "hostName")
        d.set(portNr, forKey: "port")
        d.set(apiKey, forKey: "apiKey")

        return true
    }
    
    @IBAction func testPressed( _ sender : Any ) {
        
        guard validateAndStoreDetails( showAlert: true) else { return }
        
        remote = RemoteServer()
        remote.connect(hostName: self.hostName, port: self.port, apiKey: self.apiKey) { [unowned self]  (connected) in
            if connected {
            } else {
                if self.remote.code != 1000 {
                    let errorMsg = "Unable to connect to UbercornFrame on \(self.hostName):\(self.port)) - is it running?\n\(self.remote.error)"
                    self.alert( errorMsg)
                }
            }
            //self.remote.disconnect()
        }
        
        remote.receivedMessage = { [unowned self] message in
            if message == "OK" {
                self.alert( "Successfully connected to UbercornFrame on \(self.hostName):\(self.port))" )
            } else {
                self.alert( message)
            }
            self.remote.disconnect()
        }
/*
        socket = WebSocket(url: URL(string: "ws://\(self.hostName):\(self.port)")!)
        socket.onConnect = { [unowned self] in
            print( "Connected!" )
            self.socket.disconnect()
        }
        socket.onDisconnect = { [unowned self] (error: Error?) in
            var errorMsg : String? = nil
            if let error = error as? Starscream.ErrorType {
                let code = error._code
                if code != 1000 {
                    errorMsg = "Unable to connect to UbercornFrame on \(self.hostName):\(self.port)) - is it running?\n\(error)"
                }
            }
            
            if let errorMsg = errorMsg {
                self.alert( errorMsg)
            } else {
                self.alert( "Successfully connected to UbercornFrame on \(self.hostName):\(self.port))" )
            }
        }
        socket.connect()
*/
    }
}
